--
--    Copyright 2009-2017 the original author or authors.
--
--    Licensed under the Apache License, Version 2.0 (the "License");
--    you may not use this file except in compliance with the License.
--    You may obtain a copy of the License at
--
--       http://www.apache.org/licenses/LICENSE-2.0
--
--    Unless required by applicable law or agreed to in writing, software
--    distributed under the License is distributed on an "AS IS" BASIS,
--    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--    See the License for the specific language governing permissions and
--    limitations under the License.
--

DROP PROCEDURE sptest.getnames IF EXISTS
go

DROP PROCEDURE sptest.getname IF EXISTS
go

DROP PROCEDURE sptest.adder IF EXISTS
go

DROP PROCEDURE sptest.arraytest IF EXISTS
go

DROP TABLE sptest.names IF EXISTS
go

DROP TABLE sptest.items IF EXISTS
go

DROP SCHEMA sptest IF EXISTS
go

CREATE SCHEMA sptest
    go

CREATE PROCEDURE sptest.adder(IN addend1 INTEGER, IN addend2 INTEGER, OUT theSum INTEGER)
    BEGIN atomic
        SET theSum = addend1 + addend2;
END
go

CREATE TABLE sptest.names (
    id         INTEGER,
    first_name VARCHAR(20),
    last_name  VARCHAR(20),
    PRIMARY KEY (id)
)
    go

INSERT INTO sptest.names (id, first_name, last_name
) VALUES (0, 'Fred', 'Flintstone'
)
    go

INSERT INTO sptest.names (id, first_name, last_name
) VALUES (1, 'Wilma', 'Flintstone'
)
    go

INSERT INTO sptest.names (id, first_name, last_name
) VALUES (2, 'Barney', 'Rubble'
)
    go

INSERT INTO sptest.names (id, first_name, last_name
) VALUES (3, 'Betty', 'Rubble'
)
    go

CREATE TABLE sptest.items (
    id      INTEGER GENERATED BY DEFAULT AS identity NOT NULL,
    item    VARCHAR(20),
    name_id INTEGER,
    PRIMARY KEY (id)
)
    go

INSERT INTO sptest.items (item, name_id
) VALUES ('Brontosaurus Burger', 0
)
    go

INSERT INTO sptest.items (item, name_id
) VALUES ('Lunch Box', 0
)
    go

INSERT INTO sptest.items (item, name_id
) VALUES ('Helmet', 1
)
    go

-- note that these create procedure statements will fail until hsqldb 2.0.1
CREATE PROCEDURE sptest.getname(IN nameId INTEGER)
MODIFIES SQL DATA
DYNAMIC result sets 1
BEGIN ATOMIC
DECLARE cur CURSOR FOR SELECT *
                       FROM sptest.names
                       WHERE id = nameId;
OPEN cur;
END
go

CREATE PROCEDURE sptest.getnamesanditems()
MODIFIES SQL DATA
DYNAMIC result sets 2
BEGIN ATOMIC
DECLARE cur1 CURSOR FOR SELECT *
                        FROM sptest.names;
DECLARE cur2 CURSOR FOR SELECT *
                        FROM sptest.items;
OPEN cur1;
OPEN cur2;
END
go

CREATE PROCEDURE sptest.getnamesanditemsbyid(IN nameId INTEGER)
MODIFIES SQL DATA
DYNAMIC result sets 2
BEGIN ATOMIC
DECLARE cur1 CURSOR FOR SELECT *
                        FROM sptest.names
                        WHERE id = nameId;
DECLARE cur2 CURSOR FOR SELECT *
                        FROM sptest.items
                        WHERE name_id IN (SELECT id
                                          FROM sptest.names
                                          WHERE id = nameId);
OPEN cur1;
OPEN cur2;
END
go

CREATE PROCEDURE sptest.getnames(IN lowestId INT, OUT totalrows INTEGER)
MODIFIES SQL DATA
DYNAMIC result sets 1
BEGIN ATOMIC
DECLARE cur CURSOR FOR SELECT *
                       FROM sptest.names
                       WHERE id >= lowestId;
SELECT count(*) INTO totalrows
FROM sptest.names
WHERE id >= lowestId;
OPEN cur;
END
go

CREATE PROCEDURE sptest.getnamesLowHigh(IN lowestId INT, IN highestId INT)
MODIFIES SQL DATA
DYNAMIC result sets 1
BEGIN ATOMIC
DECLARE cur CURSOR FOR SELECT *
                       FROM sptest.names
                       WHERE id >= lowestId AND id <= highestId;
OPEN cur;
END
go

CREATE PROCEDURE sptest.arraytest(IN ids INT array, OUT rowsrequested INTEGER, OUT returnedids INT array)
MODIFIES SQL DATA
DYNAMIC result sets 1
BEGIN atomic
DECLARE cur CURSOR FOR SELECT *
                       FROM sptest.names
                       WHERE id IN (unnest(ids));
SET rowsrequested = cardinality(ids);
SET returnedids = array [7, 8, 9, 10];
OPEN cur;
END
go

CREATE PROCEDURE sptest.echoDate(IN inputDate DATE, OUT outputDate DATE)
    BEGIN atomic
        SET outputDate = inputDate;
END
go

CREATE TABLE sptest.books (
    id     INTEGER NOT NULL,
    name   VARCHAR(20),
    genre1 INTEGER,
    genre2 INTEGER,
    PRIMARY KEY (id)
)
    go

INSERT INTO sptest.books (id, NAME, genre1, genre2
) VALUES
(1, 'Book1', 10, 11
),
(2, 'Book2', 10, 12
),
(3, 'Book3', 10, 11
)
    go

CREATE TABLE sptest.genres (
    id1  INTEGER,
    id2  INTEGER,
    name VARCHAR(20)
)
    go

INSERT INTO sptest.genres (id1, id2, NAME
) VALUES
(10, 11, 'Genre1'
),
(10, 12, 'Genre2'
),
(10, 13, 'Genre3'
)
    go

CREATE PROCEDURE sptest.getbookandgenre()
MODIFIES SQL DATA
DYNAMIC result sets 2
BEGIN ATOMIC
DECLARE cur1 CURSOR FOR SELECT *
                        FROM sptest.books
                        ORDER BY id;
DECLARE cur2 CURSOR FOR SELECT *
                        FROM sptest.genres;
OPEN cur1;
OPEN cur2;
END
go
